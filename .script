#!/bin/bash

# Enable strict error handling
set -e

# Function to handle errors
handle_error() {
  echo "An error occurred on line $LINENO. Check $ERROR_LOG_FILE for details."
  exit 1
}

# Trap errors to execute the handle_error function
trap 'handle_error' ERR

# Function to display usage instructions
usage() {
  echo "Usage: $0 [playlist|video] [URL] [-t]"
  echo "  playlist    Download a YouTube playlist"
  echo "  video       Download a single YouTube video"
  echo "  -t          Enable transcription after downloading (optional)"
  exit 1
}

# Ensure at least two arguments are provided
if [ "$#" -lt 2 ]; then
  usage
fi

# Assign arguments to variables
DOWNLOAD_TYPE=$1
DOWNLOAD_URL=$2
ENABLE_TRANSCRIPTION="false"

# Check for the optional -t flag
if [ "$#" -eq 3 ] && [ "$3" = "-t" ]; then
  ENABLE_TRANSCRIPTION="true"
fi

# Create a downloads directory if it doesn't exist
mkdir -p downloads

# Define the error log file path
ERROR_LOG_FILE="../error_log.txt"

# Function to stop and remove a Docker container if it exists
manage_container() {
  local container_name=$1

  # Check if the container exists
  if [ "$(docker ps -a -q -f name=^/${container_name}$)" ]; then
    # Check if the container is running
    if [ "$(docker ps -q -f name=^/${container_name}$)" ]; then
      echo "Stopping running container: $container_name"
      docker stop "$container_name"
    fi
    echo "Removing container: $container_name"
    docker rm "$container_name"
  else
    echo "No existing container named $container_name found."
  fi
}

# Function to start a docker compose service
start_service() {
  local service_dir=$1
  local container_name=$2

  # Manage existing container
  manage_container "$container_name"

  # Check if docker compose.yml exists
  if [ ! -f "$service_dir/docker-compose.yml" ]; then
    echo "docker compose.yml not found in $service_dir. Please ensure the file exists and try again."
    exit 1
  fi

  (
    cd "$service_dir" || exit

    # Pull the latest images
    echo "Pulling the latest images for $service_dir..."
    docker compose pull 2>>"$ERROR_LOG_FILE"

    # Build the services to ensure the latest images are used
    echo "Building the services in $service_dir..."
    docker compose build --pull 2>>"$ERROR_LOG_FILE"

    # Start the services
    echo "Starting the services in $service_dir..."
    docker compose up -d 2>>"$ERROR_LOG_FILE"

    # Verify services are running
    if ! docker compose ps | grep -q 'Up'; then
      echo "Failed to start services in $service_dir. Check $ERROR_LOG_FILE for details."
      exit 1
    fi
  )
}

# Verify Docker is installed and running
if ! command -v docker &> /dev/null; then
  echo "Docker is not installed. Please install Docker and try again."
  exit 1
fi

if ! ps aux | grep dockerd; then
  echo "Docker daemon is not running. Please start the Docker daemon and try again."
  exit 1
fi

# Set environment variables based on download type
case $DOWNLOAD_TYPE in
  playlist)
    export PLAYLIST_URL=$DOWNLOAD_URL
    export ENABLE_TRANSCRIPTION
    start_service "playlist_downloader" "youtube-playlist-downloader"
    ;;
  video)
    export VIDEO_URL=$DOWNLOAD_URL
    export ENABLE_TRANSCRIPTION
    start_service "video_downloader" "youtube-video-downloader"
    ;;
  *)
    usage
    ;;
esac

# Wait for all background processes to finish
wait

# Reset ownership of the downloads directory to the current user
sudo chown -R "$(whoami):$(id -gn)" downloads
