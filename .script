#!/bin/bash

# Enable strict error handling
set -e

# Function to handle errors
handle_error() {
  echo "An error occurred on line $LINENO. Check $ERROR_LOG_FILE for details."
  rm -f "$LOCKFILE"
  exit 1
}

# Trap errors to execute the handle_error function
trap 'handle_error' ERR

# Function to display usage instructions
usage() {
  echo "Usage: $0 [playlist|video|local] [URL_or_path] [-t]"
  echo "  playlist    Download a YouTube playlist"
  echo "  video       Download a single YouTube video"
  echo "  local       Process local video file(s) for transcription"
  echo "  -t          Enable transcription after downloading (optional; not required for local mode)"
  exit 1
}

# Ensure at least two arguments are provided
if [ "$#" -lt 2 ]; then
  usage
fi

# Assign arguments to variables
MODE=$1
TARGET=$2
ENABLE_TRANSCRIPTION="false"

# Check for the optional -t flag (only applicable for playlist/video)
if [ "$#" -eq 3 ] && [ "$3" = "-t" ]; then
  ENABLE_TRANSCRIPTION="true"
fi

# Create a downloads directory if it doesn't exist
mkdir -p downloads

# Define the error log file path
ERROR_LOG_FILE="../error_log.txt"

# Define a lock file for sequential queuing
LOCKFILE="/tmp/yt_downloader.lock"

# Wait if another instance is running (limit wait to 60 seconds)
MAX_ATTEMPTS=12
attempt=0
while [ -e "$LOCKFILE" ]; do
  if [ "$attempt" -ge "$MAX_ATTEMPTS" ]; then
    echo "Another instance has been running for over $(($MAX_ATTEMPTS * 5)) seconds. Exiting."
    exit 1
  fi
  echo "Another instance is running. Waiting..."
  attempt=$((attempt + 1))
  sleep 5
done
touch "$LOCKFILE"

# Function to stop and remove a Docker container if it exists
manage_container() {
  local container_name=$1
  if [ "$(docker ps -a -q -f name=^${container_name}$)" ]; then
    if [ "$(docker ps -q -f name=^${container_name}$)" ]; then
      echo "Stopping running container: $container_name"
      docker stop "$container_name"
    fi
    echo "Removing container: $container_name"
    docker rm "$container_name"
  else
    echo "No existing container named $container_name found."
  fi
}

# Function to start a docker compose service
start_service() {
  local service_dir=$1
  local container_name=$2

  # Manage existing container
  manage_container "$container_name"

  # Check if docker-compose.yml exists in the specified service directory
  if [ ! -f "$service_dir/docker-compose.yml" ]; then
    echo "docker-compose.yml not found in $service_dir. Please ensure the file exists and try again."
    rm -f "$LOCKFILE"
    exit 1
  fi

  (
    cd "$service_dir" || exit

    # Pull the latest images
    echo "Pulling the latest images for $service_dir..."
    docker compose pull 2>>"$ERROR_LOG_FILE"

    # Build the services to ensure the latest images are used
    echo "Building the services in $service_dir..."
    docker compose build --pull 2>>"$ERROR_LOG_FILE"

    # Start the services
    echo "Starting the services in $service_dir..."
    docker compose up -d 2>>"$ERROR_LOG_FILE"

    # Verify services are running
    if ! docker compose ps | grep -q 'Up'; then
      echo "Failed to start services in $service_dir. Check $ERROR_LOG_FILE for details."
      rm -f "$LOCKFILE"
      exit 1
    fi
  )
}

# Verify Docker is installed and running
if ! command -v docker &> /dev/null; then
  echo "Docker is not installed. Please install Docker and try again."
  rm -f "$LOCKFILE"
  exit 1
fi

if ! docker info > /dev/null 2>&1; then
  echo "Docker daemon is not running. Please start the Docker daemon and try again."
  rm -f "$LOCKFILE"
  exit 1
fi

# Process based on mode
case $MODE in
  playlist)
    export PLAYLIST_URL="$TARGET"
    export ENABLE_TRANSCRIPTION
    start_service "playlist_downloader" "youtube-playlist-downloader"
    ;;
  video)
    export VIDEO_URL="$TARGET"
    export ENABLE_TRANSCRIPTION
    start_service "video_downloader" "youtube-video-downloader"
    ;;
  local)
    # Check if the TARGET is a valid file or directory
    if [ -d "$TARGET" ] || [ -f "$TARGET" ]; then
      export LOCAL_VIDEO_PATH="$TARGET"
      echo "Local mode enabled. LOCAL_VIDEO_PATH set to: $TARGET"
      # Start the dedicated transcription container
      start_service "transcriber" "youtube-transcriber"
    else
      echo "Error: $TARGET is not a valid file or directory."
      rm -f "$LOCKFILE"
      exit 1
    fi
    ;;
  *)
    usage
    ;;
esac

# Wait for all background processes to finish (skip wait in local mode to avoid blocking)
if [ "$MODE" != "local" ]; then
  wait
fi

# Reset ownership of the downloads directory to the current user
sudo chown -R "$(whoami):$(id -gn)" downloads

# Remove the lock file to allow the next process in the queue
rm -f "$LOCKFILE"
